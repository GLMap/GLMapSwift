// DefaultStyle from GLMap.framework
// Copyright (c) 2013-2019 Evgen Bodunov. All rights reserved.

/******************************* Highways *******************************/

// highways is displayed on top of any other stuff
line|z9-[highway] {
    layer: 5;
}

line|z13-[highway],
line|z13-[railway]
{
    layer: eval(any(tag(layer), 0) + 5);
}

/*
 zlinear is used for linear interpolation of width, based on zoom level
 first param is zoom when interpolation starts, if object is visible earlier
 second params is used for all zooms less than first param.
 For example line|z6-[highway=motorway] is displayed at 6 zoom level, but
 width: eval( zlinear(    7,     1pt,2pt,2pt,3pt,3pt,3pt,4pt,4pt,5pt) );
 width defined only from 7-th. This means that 1pt width is used for all zooms less than 7.
*/

line|z5-[highway=motorway] {
//                          5   6   7   c8  c9  c10 c11 c12 c13 c14 c15
@if Style == Car
    width: eval( zlinear(5, 2px,2pt,2pt,2pt,2pt,3pt,3pt,3pt,4pt,4pt,max(6pt, metric(any(tag(lanes),3)*3)) ));
@else
    width: eval( zlinear(5, 1px,1pt,1pt,1pt,1pt,2pt,2pt,2pt,3pt,3pt,max(5pt, metric(any(tag(lanes),3)*2)) ));
@endif
    color: @color_motorway_casing;
    z-index: 5;
    linecap: round;
}

line|z11-[highway=motorway_link] {
//                           c11 c12 c13 c14 c15
@if Style == Car
    width: eval( zlinear(11, 1pt,1pt,2pt,2pt,max(5pt, metric(any(tag(lanes),2)*3)) ));
@else
    width: eval( zlinear(11, 0pt,0pt,1pt,1pt,max(4pt, metric(any(tag(lanes),2)*2)) ));
@endif
    color: @color_motorway_casing;
    z-index:-1;
}

line|z8-[highway=motorway],
line|z11-[highway=motorway_link] {
    color: @color_motorway;
    casing-color: @color_motorway_casing;
    casing-width: 0.5pt;
}

line|z6-[highway=trunk] {
//                          6   7   c8  c9  c10 c11 c12 c13 c14 c15
@if Style == Car
    width: eval( zlinear(6, 2px,2pt,2pt,2pt,3pt,3pt,3pt,3pt,3pt,max(5pt, metric(any(tag(lanes),3)*3)) ));
@else
    width: eval( zlinear(6, 1px,1pt,1pt,1pt,2pt,2pt,2pt,2pt,2pt,max(5pt, metric(any(tag(lanes),3)*2)) ));
@endif
    color: @color_trunk_casing;
    z-index: 4;
    
    linecap: round;
}

line|z12-[highway=trunk_link] {
//                           c   c13 c14 c15
@if Style == Car
    width: eval( zlinear(12, 1pt,2pt,2pt,max(5pt, metric(any(tag(lanes),2)*3)) ));
@else
    width: eval( zlinear(12, 0pt,1pt,1pt,max(4pt, metric(any(tag(lanes),2)*2)) ));
@endif
    color: @color_trunk_casing;

    z-index: -2;
}

line|z8-[highway=trunk],
line|z12-[highway=trunk_link] {
    color: @color_trunk;
    casing-color: @color_trunk_casing;
    casing-width: 0.5pt;
}

line|z8-[highway=primary] {
//                          8   9   c10 c11 c12 c13 c14 c15
@if Style == Car
    width: eval( zlinear(8, 2pt,2pt,2pt,2pt,3pt,3pt,3pt,max(5pt, metric(any(tag(lanes),2)*3)) ));
@else
    width: eval( zlinear(8, 1pt,1pt,1pt,1pt,2pt,2pt,2pt,max(4pt, metric(any(tag(lanes),2)*2)) ));
@endif
    color: @color_primary_casing;
    z-index: 3;
    linecap: round;
}

line|z12-[highway=primary_link] {
//                           c12 c13 c14 c15
@if Style == Car
    width: eval( zlinear(12, 1pt,2pt,2pt,max(4pt, metric(any(tag(lanes),2)*3)) ));
@else
    width: eval( zlinear(12, 0pt,1pt,1pt,max(3pt, metric(any(tag(lanes),2)*2)) ));
@endif
    color: @color_primary_casing;
    z-index: -3;
}

line|z10-[highway=primary],
line|z12-[highway=primary_link] {
    color: @color_primary;
    casing-color: @color_primary_casing;
    casing-width: 0.5pt;
}

line|z10-[highway=secondary],
line|z10-[highway=raceway] {
//                           11  c12 c13 c14 c15
@if Style == Car
    width: eval( zlinear(11, 2pt,2pt,3pt,3pt,max(4pt, metric(any(tag(lanes),2)*3)) ));
@else
    width: eval( zlinear(11, 1pt,1pt,2pt,2pt,max(3pt, metric(any(tag(lanes),2)*2)) ));
@endif
    color: @color_secondary_casing;
    z-index: 2;
    linecap: round;
}

line|z12-[highway=secondary_link] {
//                           c12 c13 c14 c15
@if Style == Car
    width: eval( zlinear(12, 1pt,2pt,2pt,max(4pt, metric(any(tag(lanes),2)*3)) ));
@else
    width: eval( zlinear(12, 0pt,1pt,1pt,max(3pt, metric(any(tag(lanes),2)*2)) ));
@endif
    color: @color_secondary_casing;

    z-index: -4;
}
line|z12-[highway=secondary],
line|z12-[highway=secondary_link],
line|z12-[highway=raceway] {
    color: @color_secondary;
    casing-color: @color_secondary_casing;
    casing-width: 0.5pt;
}

line|z12-[highway=tertiary],
line|z12-[highway=tertiary_link] {
//                           с   с13 c14 c15
@if Style == Car
    width: eval( zlinear(12, 1pt,2pt,2pt,max(4pt, metric(any(tag(lanes),2)*3)) ));
@else
    width: eval( zlinear(12, 0pt,1pt,1pt,max(3pt, metric(any(tag(lanes),2)*2)) ));
@endif
    color: @color_tertiary_casing;
    z-index: 1;
    linecap: round;
}

line|z12-[highway=tertiary],
line|z12-[highway=tertiary_link] {
    color: @color_tertiary;
    casing-color: @color_tertiary_casing;
    casing-width: 0.5pt;
}

line|z13-[highway=residential],
line|z13-[highway=unclassified],
line|z13-[highway=bus_guideway],
line|z13-[highway=road],
line|z13-[highway=living_street],
line|z13-[highway=service]
{
//                           13  14  15
@if Style == Car
    width: eval( zlinear(13, 2px,2pt,max(3pt, 6m) ));
@else
    width: eval( zlinear(13, 1px,1pt,max(2pt, 4m) ));
@endif
    color: @color_small_road;
    linecap: round;
}

line|z16-[highway][oneway=yes]
{
    fill-image:"arrow.svgpb";
}
line|z16-[highway][oneway=-1]
{
    fill-image:"arrow-back.svgpb";
}

/****************************** Detailed highways ************************/

/*
 we use real road sizes since 17 zoom level.

 eval() - evaluates function
 any() - checks it's parameters and usees first non Null
 tag() - read tag value
 metric() - set units to meters
 
 width: eval( metric(any(tag(lanes),3)*2) );
 if there is lanes use it, otherwise use 3 as default value.
 Use 2 as line width, and set units of result to meters.
*/

/****************************** Small roads, or roads with different colors ************************/

// tracks
line|z14-[highway=track] {
    //                              14  15  16  17
@if Style == Car
    dashes-width: eval( zlinear(14, 2pt,3pt,3pt,5pt ));
@else
    dashes-width: eval( zlinear(14, 2pt,2pt,2pt,4pt ));
@endif

    dashes-color: @color_small_road;
    dashes:8,8,8,8;
}

@if Style != Car
    // pedestrian
    line|z14-[highway=pedestrian]
    {
    //                                  15  16  17  18
        dashes-width: eval( zlinear(15, 2pt,3pt,3pt,4pt ) );
        dashes-color: @color_small_road;
        dashes:8,8,8,8;
    }
@endif

//line|z13-[highway=proposed], proposed roads is not displayed because they are not there yet. no construction started.
line|z13-[highway=construction],
line|z13-[highway][access=private]
{
//                                  13  14  15  16
@if Style == Car
    dashes-width: eval( zlinear(13, 2pt,3pt,3pt,4pt ));
@else
    dashes-width: eval( zlinear(13, 1pt,2pt,2pt,3pt ));
@endif
    dashes-color: @color_road_construction;
    dashes:8,8,8,8;
}
@if Style != Car
    line|z15-[highway=footway],
    line|z15-[highway=path],
    line|z15-[highway=cycleway],
    line|z15-[highway=bridleway]
    {
    //                                  16  17
        width:        eval( zlinear(16, 3pt,4pt ));
        dashes-width: eval( zlinear(16, 1pt,2pt ));
        dashes:4,4,4,4;
    }
    
    line|z15-[highway=path],
    line|z15-[highway=bridleway],
    line|z15-[highway=footway] {
        dashes-color: @color_footway_dashes;
    }

    line|z15-[highway=cycleway] {
        dashes-color: @color_cycleway_dashes;
        dashes:2,2,2,2;
    }

    line|z15-[highway=steps] {
        dashes-color: @color_footway_dashes;
    //                                  16  17
        width:        eval( zlinear(16, 5pt,6pt ));
        dashes-width: eval( zlinear(16, 3pt,4pt ));
        dashes:2,2,2,2;
    }
@endif


line|z13-[highway][access=private] {
    dashes-color: @color_private;
}

line|z15-[highway=footway][bridge],
line|z15-[highway=path][bridge],
line|z15-[highway=cycleway][bridge],
line|z15-[highway=bridleway][bridge] {
    color: @color_small_road;
}

// Bridges
line|z13-[highway][bridge]
{
    casing-color: @color_bridge;
    casing-width:1pt;
    linecap:none;
    z-index: 6;
}


line|z13-[highway][tunnel] {
    color: @color_tunnel;
}

// railways

line|z15-[railway][bridge] {
    color: @color_small_road;
}

line|z10-[railway=rail]
{
    dashes-color: @color_railway_dashes;
    dashes:12,12,12,12;
    width: 4pt;
    dashes-width: 2pt;
    galileo-stencil-type:drop-same;
    galileo-stencil-ref:4;
    linecap:none;
    z-index: 6;
}

line|z15-[railway=rail]
{
//                           17  18
    width: eval( zlinear(17, 4pt,6pt) );
    fill-image:"railway.png";
    dashes-width: none;
    galileo-stencil-type: none;
}

line|z13-[railway=tram]
{
//                                  15  16
    width: eval( zlinear(       15, 3pt,4pt ) );
    dashes-width: eval( zlinear(15, 1pt,2pt ) );
    dashes-color: @color_railway_dashes;
    dashes:6,2,6,2;
    z-index: 6;
}

line|z15-[railway=tram][layer<0],
line|z15-[railway=tram][tunnel],
line|z15-[railway=rail][layer<0],
line|z15-[railway=rail][tunnel]
{
    dashes-color: @color_railroad_tunnel;
    dashes-width: 3pt;
    fill-image: none;
    width: none;
    layer: 5;
}

line|z16-[railway=platform][!layer],
line|z16-[railway=platform][layer>=0]{
    width: eval( zlinear(16, metric(3) ) );
    color: #aaa;
    casing-color: @color_railway_dashes;
    casing-width:1pt;
    linecap: round;
}

line|z14-[railway=light_rail],
line|z15-[railway=funicular],
line|z14-[railway=narrow_gauge]
{
    dashes-width: 1pt;
    dashes-color: @color_bridge;
    dashes:2,2,2,2;
    z-index: 1;
}

line|z15-[railway][bridge] {
    casing-color: @color_bridge;
    casing-width:1pt;
    linecap:none;
    z-index: 6;
}

line|z13-[man_made=pier],
line|z13-[man_made=groyne]
{
//                                13  14    15    16    17    18
    width: eval( zlinear(    13,    1pt,2pt,2pt,3pt,3pt,4pt ) );
    color: @color_ground;
}

// rivers and streams
line|z10-[waterway=river][layer>=0],
line|z10-[waterway=river][!layer]
{
//                                10    11    12    13    14    15    16
    width: eval( zlinear( 10,     1px,1pt,2pt,3pt,4pt,5pt,6pt ) );
    color: @color_water;
    z-index: -20;
}

line|z14-[waterway=stream],
line|z14-[waterway=canal],
line|z14-[waterway=drain],
line|z14-[waterway=ditch]
{
    width: eval( zlinear( 14, 1pt,    3pt, 3m ) );
    color: @color_water;
    z-index: -20;
}

line|z14-[waterway][layer<0]
{
    width: eval( zlinear( 14, 1pt, 2pt, 3m ) );
    color: @color_water_underground;

    layer:0;
}

// tree row
line|z13-[natural=tree_row]
{
    width: 3pt;
    color: @color_wood;
    z-index: -10;
}

// runway
line|z14-[aeroway=runway]
{
    width: 8pt;
    color: @color_aeroway_runway_line;
}

line|z14-[aeroway=taxiway]
{
    width: 4pt;
    color: @color_aeroway_runway_line;
}

/******************** Line names *************************/

// road references
line|z9-[highway=motorway],
line|z9-[highway=trunk],
line|z9-[highway=primary],
line|z10-[highway=secondary]
{
    text: eval(any(tag('int_ref'), tag('ref')));
    text-color: @color_suburb_text;
    font-size:8;
    font-stroke-width:1pt;
    font-stroke-color: @color_label_stroke;

    text-priority: 4;
}

line|z10-[highway=motorway],
line|z10-[highway=trunk],
line|z10-[highway=primary],
line|z11-[highway=secondary] {
    text: eval(any(tag('ref'), tag('int_ref')));
}

// highway names
line|z13-[highway=motorway],
line|z13-[highway=trunk],
line|z13-[highway=primary],
line|z14-[highway=secondary]
{
    text: eval(any(locTag('name'), tag('ref'), tag('int_ref')));
    text-priority: 5;
    text-color: @color_label_text;
    font-size:11;
    font-stroke-width:2pt;
    font-stroke-color: @color_label_stroke;
}

// bigger font size from zoom 11
line|z11-[highway=motorway],
line|z11-[highway=trunk],
line|z10-[highway=primary],
line|z10-[highway=secondary]
{
    font-size:10;
}

line|z15-[highway=residential],
line|z15-[highway=living_street],
line|z15-[highway=tertiary],
line|z15-[highway=service],
line|z15-[highway=unclassified],
line|z15-[highway=bus_guideway],
line|z15-[highway=road]
{
    text: eval(locTag('name'));
    text-priority: 4;
    text-color: @color_label_text;
    font-size:10;
    font-stroke-width:1pt;
    font-stroke-color: @color_label_stroke;
}

@if Style != Car
    // small highway name rule
    line|z15-[highway=footway],
    line|z15-[highway=path],
    line|z15-[highway=cycleway],
    line|z15-[highway=bridleway],
    line|z15-[highway=steps]
    {
        text: eval(locTag('name'));
        text-priority: 3;
        text-color: @color_label_text;
        font-size:10;
        font-stroke-width:1pt;
        font-stroke-color: @color_label_stroke;
    }
@endif

line|z13-[highway][access=private] {
    text-color: @color_private_access_text;
}

// river names
line|z16-[waterway=river],
line|z17-[waterway=stream]
{
    text: eval(locTag('name'));
    text-color: @color_water_text;
    font-size:11;
    font-stroke-width:2pt;
    font-stroke-color: @color_water;
}

@if PistesAndLifts
    line|z15-[piste:difficulty] {
        text:eval(any(locTag('name'), tag('ref')));
        text-color: @color_label_text;
        font-size:12;
        font-stroke-width:2pt;
        font-stroke-color: @color_label_stroke;
    }

    line|z13-[piste:difficulty] {
        color:white;
        width:2pt;
        dashes-width: none;
    }

    line|z13-[piste:difficulty=novice] {
        color: @color_difficulty_novice;
        text-color: @color_difficulty_novice;
    }

    line|z13-[piste:difficulty=easy] {
        color: @color_difficulty_easy;
        text-color: @color_difficulty_easy;
    }

    line|z13-[piste:difficulty=intermediate] {
        color: @color_difficulty_intermediate;
        text-color: @color_difficulty_intermediate;
    }

    line|z13-[piste:difficulty=advanced],
    line|z13-[piste:difficulty=expert],
    line|z13-[piste:difficulty=extreme] {
        color: @color_difficulty_expert;
        text-color: @color_difficulty_expert;
    }

    line|z13-[piste:difficulty=extreme] {
        dashes: 4,4,4,4;
        dashes-width: 2pt;
    }

    line|z13-[piste:difficulty=freeride] {
        text-color: @color_difficulty_freeride;
        dashes-color: @color_difficulty_freeride;
        dashes: 4,4,4,4;
        dashes-width: 2pt;
    }

    line|z13-[aerialway]{ // chair_lift, cable_car, drag_lift
        color: black;
        width: 1pt;
        dashes: 2,6,2,6;
        dashes-width: 4pt;
        dashes-color: black;
    }

    line|z15-[aerialway] {
        text:eval(any(locTag('name'), tag('ref')));
        text-color: @color_aerialway_text;
        font-size:12;
        font-stroke-width:2pt;
        font-stroke-color: @color_label_stroke;
    }
@endif

line|z14-[man_made=cutline] {
    color: @color_ground;
    width:3pt;
}

